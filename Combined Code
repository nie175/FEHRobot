#include <FEHLCD.h>
#include <FEHUtility.h>
#include <FEHIO.h>
#include <FEHMotor.h>
#include <FEHRPS.h>

#define pi 3.14159265359

//declaration of ports
FEHMotor right_motor(FEHMotor::Motor0,9.0);
FEHMotor left_motor(FEHMotor::Motor1,9.0);
DigitalEncoder right_encoder(FEHIO::P0_0);
DigitalEncoder left_encoder(FEHIO::P0_1);
AnalogInputPin rightSensor(FEHIO::P1_0);
AnalogInputPin middleSensor(FEHIO::P1_1);
AnalogInputPin leftSensor(FEHIO::P1_2);
AnalogInputPin sensor(FEHIO::P1_3);

//declare variables
float speed = 30, CdS_Blue, CdS_Red, CdS_None;
double wheelRadius = 1.25, halfCircleCounts = 477, distanceToCenter = 3.1;
int igwanCountsRotation = 318, sensorLineThreshold, sensorNoLineThreshold;

void move_forward(double distance) {
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();

 //calculates counts from distance
 int counts = distance * igwanCountsRotation / (2 * pi * wheelRadius);
 LCD.WriteLine(counts);
 //Set both motors to desired percent
 right_motor.SetPercent(speed);
 left_motor.SetPercent(speed);

 //While the average of the left and right encoder is less than counts,
 //keep running motors
 while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 LCD.WriteLine("Counts Reached. Stopping");
 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();

}

void turn_left(int degrees) {
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();

 //calculates counts from degrees
 int counts = halfCircleCounts * (degrees/180.0);

 //Set both motors to desired percent
 right_motor.SetPercent(speed);
 left_motor.SetPercent(-1.0 * speed);

 //While the average of the left and right encoder is less than counts,
 //keep running motors
 while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();
}

void turn_right(int degrees) {
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();

 //calculates counts from degrees
 int counts = halfCircleCounts * (degrees/180.0);

 //Set both motors to desired percent
 right_motor.SetPercent(-1.0 * speed);
 left_motor.SetPercent(speed);

 //While the average of the left and right encoder is less than counts,
 //keep running motors
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();
}

void follow_line() {
 int position;
 while(true) {
 if (leftSensor.Value() > sensorLineThreshold) {
 position = 2;
 }
 else if (rightSensor.Value() > sensorLineThreshold) {
 position = 0;
 }
 else if (middleSensor.Value() > sensorLineThreshold) {
 position = 1;
 }
 else if (rightSensor.Value() < sensorNoLineThreshold && middleSensor.Value() < sensorNoLineThreshold && leftSensor.Value() < sensorNoLineThreshold) {
 position = -1;
 }

 switch(position) {
 case 2:
 right_motor.SetPercent(16);
 left_motor.SetPercent(-16);
 //LCD.WriteLine("We are turning left");
 break;
 case 1:
 right_motor.SetPercent(12);
 left_motor.SetPercent(12);
 //LCD.WriteLine("We are going straight");
 break;
 case 0:
 right_motor.SetPercent(-16);
 left_motor.SetPercent(16);
 //LCD.WriteLine("We are turning right");
 break;
 default:
 //LCD.WriteLine("We are here");
 right_motor.SetPercent(0);
 left_motor.SetPercent(0);
 }
 }
}

void drive_to_line() {
 //go till it hits line
 right_motor.SetPercent(speed);
 left_motor.SetPercent(speed);

 while(!(middleSensor.Value() > sensorLineThreshold));

 right_motor.Stop();
 left_motor.Stop();
}

int main(void)
{
     //declare variables
    float x,y;

    LCD.Clear(FEHLCD::Black);
    LCD.SetFontColor(FEHLCD::White);
    AnalogInputPin RightSensor(FEHIO::P0_0);
    AnalogInputPin MiddleSensor(FEHIO::P0_1);
    AnalogInputPin LeftSensor(FEHIO::P0_3);
    LCD.WriteLine("Please touch to start.");
    //waits for touch

    while(true)
    {
        if(LCD.Touch(&x,&y))
        {
            LCD.Write("Right Value: ");
            LCD.WriteLine(RightSensor.Value());

            LCD.Write("Middle Value: ");
            LCD.WriteLine(MiddleSensor.Value());

            LCD.Write("Left Value: ");
            LCD.WriteLine(LeftSensor.Value());

            LCD.WriteLine("");

            Sleep(100);
        }
    }

    return 0;
    while(!LCD.Touch(&x, &y));
    while(LCD.Touch(&x, &y));

    move_forward(7.0);

    turn_left(90);

    drive_to_line();

    //aligns center with line
    move_forward(distanceToCenter);

   //turn left till middle touches line
    //Set both motors to desired percent
    right_motor.SetPercent(.75 * speed);
    left_motor.SetPercent(-0.75 * speed);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while(!(middleSensor.Value() > sensorLineThreshold));

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
   //end of turning towards line

    //follows line to end
    follow_line();

    //aligns light to CdS Sensor
    //move_forward() code here

    //senses light color
    int lightColor; //0 for none, 1 for red, 2 for blue
    if (sensor.Value() < CdS_Red) {
    lightColor = 1;
    } else if (sensor.Value() > 2.8) {
    lightColor = 0;
    } else {
    lightColor = 2;
    }

    switch(lightColor) {
    case 0:
    LCD.SetFontColor(WHITE);
    LCD.WriteLine("No light");
    break;
    case 1:
    LCD.SetFontColor(RED);
    LCD.WriteLine("Red Light");
    turn_right(10);
    drive_to_line();
    break;
    case 2:
    LCD.SetFontColor(BLUE);
    LCD.WriteLine("Blue Light");
    turn_left(10);
    drive_to_line();
    break;
    default:
    LCD.SetFontColor(WHITE);
    LCD.WriteLine("THIS IS WRONG");
    }





}

